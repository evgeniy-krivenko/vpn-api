// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/connection.proto

package connection_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	GetConnectionStatus(ctx context.Context, in *ConnectionStatusReq, opts ...grpc.CallOption) (*ConnectionStatusResp, error)
	GetNewConfig(ctx context.Context, in *NewConfigReq, opts ...grpc.CallOption) (*NewConfigResp, error)
	GetServers(ctx context.Context, in *ServersReq, opts ...grpc.CallOption) (*ServersResp, error)
	ActivateConnection(ctx context.Context, in *ActivateConnReq, opts ...grpc.CallOption) (*ActivateConnectionRes, error)
	DeactivateConnection(ctx context.Context, in *DeactivateConnReq, opts ...grpc.CallOption) (*DeactivateConnRes, error)
}

type connectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionServiceClient(cc grpc.ClientConnInterface) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) GetConnectionStatus(ctx context.Context, in *ConnectionStatusReq, opts ...grpc.CallOption) (*ConnectionStatusResp, error) {
	out := new(ConnectionStatusResp)
	err := c.cc.Invoke(ctx, "/ConnectionService/GetConnectionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetNewConfig(ctx context.Context, in *NewConfigReq, opts ...grpc.CallOption) (*NewConfigResp, error) {
	out := new(NewConfigResp)
	err := c.cc.Invoke(ctx, "/ConnectionService/GetNewConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetServers(ctx context.Context, in *ServersReq, opts ...grpc.CallOption) (*ServersResp, error) {
	out := new(ServersResp)
	err := c.cc.Invoke(ctx, "/ConnectionService/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) ActivateConnection(ctx context.Context, in *ActivateConnReq, opts ...grpc.CallOption) (*ActivateConnectionRes, error) {
	out := new(ActivateConnectionRes)
	err := c.cc.Invoke(ctx, "/ConnectionService/ActivateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) DeactivateConnection(ctx context.Context, in *DeactivateConnReq, opts ...grpc.CallOption) (*DeactivateConnRes, error) {
	out := new(DeactivateConnRes)
	err := c.cc.Invoke(ctx, "/ConnectionService/DeactivateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
// All implementations must embed UnimplementedConnectionServiceServer
// for forward compatibility
type ConnectionServiceServer interface {
	GetConnectionStatus(context.Context, *ConnectionStatusReq) (*ConnectionStatusResp, error)
	GetNewConfig(context.Context, *NewConfigReq) (*NewConfigResp, error)
	GetServers(context.Context, *ServersReq) (*ServersResp, error)
	ActivateConnection(context.Context, *ActivateConnReq) (*ActivateConnectionRes, error)
	DeactivateConnection(context.Context, *DeactivateConnReq) (*DeactivateConnRes, error)
	mustEmbedUnimplementedConnectionServiceServer()
}

// UnimplementedConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionServiceServer struct {
}

func (UnimplementedConnectionServiceServer) GetConnectionStatus(context.Context, *ConnectionStatusReq) (*ConnectionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionStatus not implemented")
}
func (UnimplementedConnectionServiceServer) GetNewConfig(context.Context, *NewConfigReq) (*NewConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewConfig not implemented")
}
func (UnimplementedConnectionServiceServer) GetServers(context.Context, *ServersReq) (*ServersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (UnimplementedConnectionServiceServer) ActivateConnection(context.Context, *ActivateConnReq) (*ActivateConnectionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateConnection not implemented")
}
func (UnimplementedConnectionServiceServer) DeactivateConnection(context.Context, *DeactivateConnReq) (*DeactivateConnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateConnection not implemented")
}
func (UnimplementedConnectionServiceServer) mustEmbedUnimplementedConnectionServiceServer() {}

// UnsafeConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServiceServer will
// result in compilation errors.
type UnsafeConnectionServiceServer interface {
	mustEmbedUnimplementedConnectionServiceServer()
}

func RegisterConnectionServiceServer(s grpc.ServiceRegistrar, srv ConnectionServiceServer) {
	s.RegisterService(&ConnectionService_ServiceDesc, srv)
}

func _ConnectionService_GetConnectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetConnectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConnectionService/GetConnectionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetConnectionStatus(ctx, req.(*ConnectionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetNewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetNewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConnectionService/GetNewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetNewConfig(ctx, req.(*NewConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConnectionService/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetServers(ctx, req.(*ServersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_ActivateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).ActivateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConnectionService/ActivateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).ActivateConnection(ctx, req.(*ActivateConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_DeactivateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).DeactivateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConnectionService/DeactivateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).DeactivateConnection(ctx, req.(*DeactivateConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionService_ServiceDesc is the grpc.ServiceDesc for ConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectionStatus",
			Handler:    _ConnectionService_GetConnectionStatus_Handler,
		},
		{
			MethodName: "GetNewConfig",
			Handler:    _ConnectionService_GetNewConfig_Handler,
		},
		{
			MethodName: "GetServers",
			Handler:    _ConnectionService_GetServers_Handler,
		},
		{
			MethodName: "ActivateConnection",
			Handler:    _ConnectionService_ActivateConnection_Handler,
		},
		{
			MethodName: "DeactivateConnection",
			Handler:    _ConnectionService_DeactivateConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/connection.proto",
}
